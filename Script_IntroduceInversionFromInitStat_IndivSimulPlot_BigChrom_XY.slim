// set up a simple neutral simulation
initialize() {
	// set the overall mutation rate
	initializeMutationRate(mu);
	// m1 mutation type: neutral
	initializeMutationType("m1", h, "f", s); //Recessive deleterious mutations
	initializeMutationType("m2", 0.5, "f", 0);// Sex-determining mutations 
	initializeMutationType("m4", 0.5, "f", 0);// Inversion marker 

	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);

	// 20Mb for two chromosome
	initializeGenomicElement(g1, 0,19999999);


	// uniform recombination along two chromosomes
	rates=c(r, 0.5, r);//Two chromosomes with R=1e-8	
    ends=c(9999999,10000000,19999999); //Two chromosome of size 10Mb	
	initializeRecombinationRate(rates, ends);
	initializeSex("A"); //Define Sex
}

15000 {
	defineConstant("pos",start+integerDiv(end-start,2)); //Pos, the position of the inversion marker, must be an integer. Here, I use integerDiv to calculate the middle of the position of the inversion and define it as an integer
	defineConstant("sizeInv",end-start+1); //The size of the inversion : used for output printing
}

15000 late() {  //Start at generation 15000 
	sim.readFromPopulationFile(Init); //Read the initiation file
	// start a newly seeded run
	setSeed(rdunif(1, 0, asInteger(2^62) - 1));
	YChromBool=p1.genomes.containsMarkerMutation(m2,5000000);//vector of boolean depending on whether genome that contain the "Y" sex-determining mutations 
    if ( SexChrom == "Y") // If the focal sexChromosome specified in command line is "Y"
        { Chrom=p1.genomes[YChromBool];}//Grep the genomes that contains the Y mutations
    else
        {Chrom=p1.genomes[!YChromBool];}//Grep the genomes not containing it, i.e. containing the X mutations.
    sample(Chrom, 1).addNewDrawnMutation(m4, pos); //introduce a new inversion in one of the focal genomes
	VecMut=p1.genomes.containsMarkerMutation(m4,pos);//vector of boolean depending on whether genomes contain the inversion
	genomeWInv=p1.genomes[VecMut]; // genome with inversion
	genomeNoInv=p1.genomes[!VecMut];//genomes without inversion
	posMut = genomeWInv.mutationsOfType(m1).position; //Position of mutations in the genome with the inversion
	NbMutInv=sum((posMut >= start) & (posMut < end)); //nb of mutations in inversion
	MutInvBool=((posMut >= start) & (posMut < end));
    MutInv=genomeWInv.mutationsOfType(m1)[MutInvBool];//Mutation within the inversion
	if (NbMutInv > 0) //If there is a least one mutation in the inverion, calculate their mean frequency.
	{
    	MutInvFreq=mean(sim.mutationFrequencies(NULL, MutInv)); //mean frequency of mutations in inversion
	}
	else
	{
    	MutInvFreq=0; //If there is no mutation within the inversion, the mean frequency is 0.
	}
	NMutNoInvvec=c();//vector to contains the number of mutation within the region of the inversion in samples without the inversion
	FreqMutNoInvvec=c();
	for (g in genomeNoInv) { //For all genome without the inversion
		posMut = g.mutationsOfType(m1).position; //position of mutation in this genome
		NbMut=sum((posMut >= start) & (posMut < end)); //Number of mutation in the inversion region
		NMutNoInvvec=c(NMutNoInvvec, NbMut); //put in a vector
		MutNoInvBool=((posMut >= start) & (posMut < end));
    	MutNoInv=g.mutationsOfType(m1)[MutNoInvBool];M
    	MutNoInvFreq=mean(sim.mutationFrequencies(NULL, MutNoInv)); //Mean frequency of mutation in the region of the inversion 
		FreqMutNoInvvec=c(FreqMutNoInvvec, MutNoInvFreq); //put in the vector
}
	meanNbMutNoInv=mean(NMutNoInvvec);
	meanFreqMutNoInv=mean(FreqMutNoInvvec);
	defineConstant("NMutInv",NbMutInv); //save the variables
	defineConstant("NMutNoInv",meanNbMutNoInv); //
	defineConstant("FreqMutNoInv",meanFreqMutNoInv); //
	defineConstant("FreqMutInv",MutInvFreq); //
}
15001 early() { //grep the fitness associated with samples with and without the inversion
	VecMut=p1.genomes.containsMarkerMutation(m4,pos);//vector of boolean depending on whether genome that contain the inversion
	genomeWInv=p1.genomes[VecMut]; // genome with inversion
	genomeNoInv=p1.genomes[!VecMut];//genome without inversion
    meanFitnessInv=p1.cachedFitness(genomeWInv.individual.index); //Mean Fitness of sample with inversion
    meanFitnessNoInv=mean(p1.cachedFitness(genomeNoInv.individual.index));//Mean Fitness of samples without inversion
	defineConstant("FitNoInv",meanFitnessNoInv); //save the variables
	defineConstant("FitInv",meanFitnessInv); 
}

15000:25000	modifyChild(p1) { //simulating the meeting between two gamete and fecondation depand on their genotype
	numY = sum(child.genomes.containsMarkerMutation(m2, 5000000)); //Number of sex-determining mutation in the produced child
	// no individual should have more than one Y
	if (numY > 1)
		stop("### ERROR: got too many Ys"); //If the sample have two Y, something is going wrong.
	// females should have 0 Y's
	if (child.sex == "F" & numY > 0) //Females must be without the Y sex-determining mutations
		return F;
	// males should have 1 Y
	if (child.sex == "M" & numY == 0) //Males must have one Y.
		return F;
	return T;
}


15001:25000 early() { //record inversion frequency 
	if (sim.generation % 2 == 0) //every 2 generation
	{
		file=paste(c("../Output/N=",N,"_Inv=",start, "-", end, "_r=", r, "_u=",mu ,"_h=",h,"_s=",s,"IntroduceInvFromInit_Nmut_Freq_Fit_IndivPlot_XY.txt"), sep=""); //Name of the file
		mut4 = sim.mutationsOfType(m4);//Inversion Marker
		if (size (mut4) != 1) //If the inversion is lost, print the output and quit.
		{
            line=paste(c(N,"\t", mu,"\t",r,"\t",h,"\t",s,"\t",sim.generation,"\t",start,"\t",end,"\t",SexChrom, "\t", rep,"\t",NMutInv, "\t",FreqMutInv, "\t",FitInv, "\t", NMutNoInv,"\t", FreqMutNoI$v,"\t", FitNoInv, "\t","0.0")); //output the frequency of a given mutation
			line=paste(c(N,"\t", mu,"\t",r,"\t",h,"\t",s,"\t",sim.generation,"\t",start,"\t",end,"\t",rep,"\t",NMutInv, "\t",FreqMutInv, "\t",FitInv, "\t", NMutNoInv,"\t", FreqMutNoInv,"\t", FitNoInv, "\t","0.0")); 
			writeFile(file, line, append=T);
			sim.simulationFinished();
		}
		else //Else, print the inversion frequency
		{
		Freq4=sim.mutationFrequencies(NULL, mut4);
        line=paste(c(N,"\t", mu,"\t",r,"\t",h,"\t",s,"\t",sim.generation,"\t",start,"\t",end,"\t",SexChrom, "\t", rep,"\t",NMutInv, "\t",FreqMutInv, "\t",FitInv, "\t", NMutNoInv,"\t", FreqMutNoInv,"\t",
		writeFile(file, line, append=T);
		}
	}
}

25000 late() { //Run for 10,000 generation
	sim.simulationFinished();
}

recombination() { //Define special recombination pattern depending on mutation (inversion) presence
	if (genome1.containsMarkerMutation(m4, pos) == genome2.containsMarkerMutation(m4, pos)) //if individuals is homozygous for the inversion or for its absence, do nothing 
		{return F;} //Nothing happens
	else
		{ 
		inInv = (breakpoints > start) & (breakpoints < end); //Grep recombination breakpoints within the inversion
		if (!any(inInv)) //If no recombination breakpoint fall in the inversion breakpoint, 
			{return F;} // Nothing happens
		else 
			{breakpoints = breakpoints[!inInv]; //If not, these recombinations can't occur
			return T;
			}
		}
	}
